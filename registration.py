from telegram import Update, ReplyKeyboardRemove
from telegram.ext import CallbackContext, ConversationHandler, MessageHandler, Filters, CommandHandler, CallbackQueryHandler
from db import add_user, update_user_photos, update_user_videos, is_blocked as db_is_blocked, get_user
from utils import (
    validate_name,
    validate_age,
    validate_city,
    save_photo,
    save_video,
    get_gender_self_keyboard,
    get_gender_interest_keyboard,
    get_interests_inline_keyboard,
    get_smoke_keyboard,
    get_drink_keyboard,
    get_relationship_keyboard,
    get_main_menu,
    get_done_keyboard,
    get_skip_keyboard,
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
(
    R_NAME,
    R_AGE,
    R_CITY,
    R_GENDER_SELF,
    R_GENDER_INTEREST,
    R_INTERESTS,
    R_PHOTOS,
    R_VIDEOS,
    R_HABITS,
    R_CONFIRM
) = range(10)

def start_registration(update: Update, context: CallbackContext):
    if db_is_blocked(update.effective_user.id):
        update.message.reply_text("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
        return ConversationHandler.END
    # –ï—Å–ª–∏ –∞–Ω–∫–µ—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
    existing = get_user(update.effective_user.id)
    if existing:
        from utils import get_main_menu
        update.message.reply_text("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–Ω–∫–µ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ.", reply_markup=get_main_menu())
        return ConversationHandler.END
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤.\n\n"
        "–ù–∞—á–Ω—ë–º. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
        reply_markup=ReplyKeyboardRemove(),
    )
    return R_NAME

def r_name(update: Update, context: CallbackContext):
    name = update.message.text.strip()
    if not validate_name(name):
        update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∏–º—è —Ç–æ–ª—å–∫–æ –±—É–∫–≤–∞–º–∏, 2-30 —Å–∏–º–≤–æ–ª–æ–≤.")
        return R_NAME
    context.user_data['name'] = name
    update.message.reply_text("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    return R_AGE

def r_age(update: Update, context: CallbackContext):
    age = update.message.text.strip()
    if not validate_age(age):
        update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 18 –¥–æ 99.")
        return R_AGE
    context.user_data['age'] = int(age)
    update.message.reply_text("–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?")
    return R_CITY

def r_city(update: Update, context: CallbackContext):
    city = update.message.text.strip()
    if not validate_city(city):
        update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –±–µ–∑ —Ü–∏—Ñ—Ä –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤.")
        return R_CITY
    context.user_data['city'] = city
    update.message.reply_text("–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª", reply_markup=get_gender_self_keyboard())
    return R_GENDER_SELF

def r_gender_self(update: Update, context: CallbackContext):
    raw = update.message.text.strip().lower()
    if raw.startswith("–ø–∞—Ä–µ–Ω—å") or "üë®" in raw:
        context.user_data['gender'] = "–ü–∞—Ä–µ–Ω—å"
    elif raw.startswith("–¥–µ–≤—É—à–∫–∞") or "üë©" in raw:
        context.user_data['gender'] = "–î–µ–≤—É—à–∫–∞"
    else:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return R_GENDER_SELF
    update.message.reply_text("–ö–æ–≥–æ —Ç—ã –∏—â–µ—à—å?", reply_markup=get_gender_interest_keyboard())
    return R_GENDER_INTEREST

def r_gender_interest(update: Update, context: CallbackContext):
    raw = update.message.text.strip()
    normalized = None
    if raw.startswith("–ü–∞—Ä–Ω–∏"):
        normalized = "–ü–∞—Ä–Ω–∏"
    elif raw.startswith("–î–µ–≤—É—à–∫–∏"):
        normalized = "–î–µ–≤—É—à–∫–∏"
    elif raw.startswith("–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"):
        normalized = "–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"
    if not normalized:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return R_GENDER_INTEREST
    context.user_data['gender_interest'] = normalized
    context.user_data['interests'] = []
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã, –æ—Ç–º–µ—á–∞—è –≥–∞–ª–æ—á–∫–∞–º–∏. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –Ω–∞–∂–º–∏ –ì–æ—Ç–æ–≤–æ.",
    )
    update.message.reply_text(
        "–°–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤:",
        reply_markup=get_interests_inline_keyboard(context.user_data['interests'])
    )
    return R_INTERESTS

def r_interests(update: Update, context: CallbackContext):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –∏–¥—ë—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ
    update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –ì–æ—Ç–æ–≤–æ.")
    return R_INTERESTS


def interests_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    data = query.data
    selected = context.user_data.get('interests', [])
    if data == 'intdone':
        if not selected:
            query.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–µ—Å')
            return R_INTERESTS
        query.answer('–ì–æ—Ç–æ–≤–æ')
        query.edit_message_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–∏–Ω–∏–º—É–º 3 —Å–≤–æ–∏—Ö –Ω–∞—Å—Ç–æ—è—â–∏—Ö —Ñ–æ—Ç–æ, –∏–Ω–∞—á–µ –∞–Ω–∫–µ—Ç–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.\n"
            "–ó–∞–≥—Ä—É–∂–∞–π—Ç–µ –ø–æ –æ–¥–Ω–æ–º—É. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –ì–æ—Ç–æ–≤–æ."
        )
        context.user_data['photos'] = []
        return R_PHOTOS
    if data.startswith('intsel:'):
        idx = int(data.split(':', 1)[1])
        from utils import INTERESTS_LIST
        interest = INTERESTS_LIST[idx]
        if interest in selected:
            selected.remove(interest)
        else:
            selected.append(interest)
        context.user_data['interests'] = selected
        query.answer('–û–±–Ω–æ–≤–ª–µ–Ω–æ')
        query.edit_message_reply_markup(reply_markup=get_interests_inline_keyboard(selected))
        return R_INTERESTS
    query.answer()
    return R_INTERESTS

def r_photos(update: Update, context: CallbackContext):
    if update.message.text and update.message.text.strip().lower() == "–≥–æ—Ç–æ–≤–æ":
        photos = context.user_data.get('photos', [])
        if len(photos) < 3:
            update.message.reply_text("–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 —Ñ–æ—Ç–æ. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.")
            return R_PHOTOS
        update.message.reply_text("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –≤ –∞–Ω–∫–µ—Ç—É. –û—Ç–ø—Ä–∞–≤—å –≤–∏–¥–µ–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
        context.user_data['videos'] = []
        return R_VIDEOS

    if update.message.photo:
        photo_file = update.message.photo[-1].get_file()
        photo_index = len(context.user_data.get('photos', [])) + 1
        path = save_photo(photo_file, update.effective_user.id, photo_index)
        photos = context.user_data.get('photos', [])
        photos.append(path)
        context.user_data['photos'] = photos
        update.message.reply_text(
            f"–§–æ—Ç–æ {photo_index} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –∏–ª–∏ –Ω–∞–∂–∞—Ç—å '–ì–æ—Ç–æ–≤–æ'.",
            reply_markup=get_done_keyboard(),
        )
        return R_PHOTOS
    else:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ.", reply_markup=get_done_keyboard())
        return R_PHOTOS

def r_videos(update: Update, context: CallbackContext):
    if update.message.text and update.message.text.strip().lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        # –ò–¥–µ–º –¥–∞–ª—å—à–µ –∫ –æ–ø—Ä–æ—Å—É –ø—Ä–∏–≤—ã—á–µ–∫
        update.message.reply_text("–ö—É—Ä–∏—à—å –ª–∏ —Ç—ã?", reply_markup=get_smoke_keyboard())
        return R_HABITS

    if update.message.video:
        video_file = update.message.video.get_file()
        video_index = len(context.user_data.get('videos', [])) + 1
        path = save_video(video_file, update.effective_user.id, video_index)
        videos = context.user_data.get('videos', [])
        videos.append(path)
        context.user_data['videos'] = videos
        if len(videos) >= 3:
            update.message.reply_text("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 3 –≤–∏–¥–µ–æ. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø—Ä–æ—Å—É.")
            update.message.reply_text("–ö—É—Ä–∏—à—å –ª–∏ —Ç—ã?", reply_markup=get_smoke_keyboard())
            return R_HABITS
        update.message.reply_text(
            f"–í–∏–¥–µ–æ {video_index} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –∏–ª–∏ –Ω–∞–∂–∞—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.",
            reply_markup=get_skip_keyboard(),
        )
        return R_VIDEOS
    else:
        update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –≤–∏–¥–µ–æ –∏–ª–∏ –Ω–∞–∂–º–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.",
            reply_markup=get_skip_keyboard(),
        )
        return R_VIDEOS

def r_habits(update: Update, context: CallbackContext):
    text = update.message.text.strip()

    def normalize_smoking(txt: str):
        t = txt.lower()
        if t.startswith("üö≠") or "–Ω–µ –∫—É—Ä—é" in t:
            return "–ù–µ –∫—É—Ä—é"
        if t.startswith("üö¨") or "–∫—É—Ä—é" in t:
            return "–ö—É—Ä—é"
        if "–Ω–µ –æ—Ç–≤–µ—á–∞—Ç—å" in t:
            return "–ù–µ –æ—Ç–≤–µ—á–∞—Ç—å"
        return None

    def normalize_drinking(txt: str):
        t = txt.lower()
        if t.startswith("üö´") or "–Ω–µ –ø—å—é" in t:
            return "–ù–µ –ø—å—é"
        if t.startswith("üç∑") or "–ø—å—é" in t:
            return "–ü—å—é"
        if "–Ω–µ –æ—Ç–≤–µ—á–∞—Ç—å" in t:
            return "–ù–µ –æ—Ç–≤–µ—á–∞—Ç—å"
        return None

    def normalize_relationship(txt: str):
        t = txt.lower()
        if t.startswith("üíî") or "–Ω–µ—Ç" in t or "–Ω–µ –±—ã–ª–∏" in t or "–Ω–µ –±—ã–ª–æ" in t:
            return "–ù–µ—Ç"
        if t.startswith("‚ù§Ô∏è") or "–¥–∞" in t or "–±—ã–ª–∏" in t or "–±—ã–ª–æ" in t:
            return "–î–∞"
        if "–Ω–µ –æ—Ç–≤–µ—á–∞—Ç—å" in t:
            return "–ù–µ –æ—Ç–≤–µ—á–∞—Ç—å"
        return None

    if 'smoking' not in context.user_data:
        value = normalize_smoking(text)
        if value is None:
            update.message.reply_text("–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return R_HABITS
        context.user_data['smoking'] = value
        update.message.reply_text("–ü—å—ë—à—å –ª–∏ —Ç—ã?", reply_markup=get_drink_keyboard())
        return R_HABITS

    if 'drinking' not in context.user_data:
        value = normalize_drinking(text)
        if value is None:
            update.message.reply_text("–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return R_HABITS
        context.user_data['drinking'] = value
        update.message.reply_text("–ë—ã–ª–∏ –ª–∏ —É —Ç–µ–±—è –æ—Ç–Ω–æ—à–µ–Ω–∏—è?", reply_markup=get_relationship_keyboard())
        return R_HABITS

    if 'relationship' not in context.user_data:
        value = normalize_relationship(text)
        if value is None:
            update.message.reply_text("–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return R_HABITS
        context.user_data['relationship'] = value

        data = context.user_data
        try:
            add_user(
                telegram_id=update.effective_user.id,
                name=data['name'],
                age=data['age'],
                city=data['city'],
                gender=data.get('gender'),
                gender_interest=data['gender_interest'],
                interests=data['interests'],
                smoking=data.get('smoking'),
                drinking=data.get('drinking'),
                relationship=data.get('relationship'),
            )
            update_user_photos(update.effective_user.id, data.get('photos', []))
            update_user_videos(update.effective_user.id, data.get('videos', []))
        except Exception as e:
            update.message.reply_text("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return ConversationHandler.END

        update.message.reply_text(
            "–ê–Ω–∫–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞! –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –∏—Å–∫–∞—Ç—å –∑–Ω–∞–∫–æ–º—ã—Ö.\n"
            "–ú–∏–Ω–∏–º—É–º 3 —Ñ–æ—Ç–æ –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–º–æ–≥–∞—é—Ç –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.",
            reply_markup=get_main_menu(),
        )
        context.user_data.clear()
        return ConversationHandler.END


def build_conversation_handler():
    return ConversationHandler(
        entry_points=[CommandHandler('start', start_registration)],
        states={
            R_NAME: [MessageHandler(Filters.text & (~Filters.command), r_name)],
            R_AGE: [MessageHandler(Filters.text & (~Filters.command), r_age)],
            R_CITY: [MessageHandler(Filters.text & (~Filters.command), r_city)],
            R_GENDER_SELF: [MessageHandler(Filters.text & (~Filters.command), r_gender_self)],
            R_GENDER_INTEREST: [MessageHandler(Filters.text & (~Filters.command), r_gender_interest)],
            R_INTERESTS: [
                MessageHandler(Filters.text & (~Filters.command), r_interests),
                CallbackQueryHandler(interests_callback, pattern=r"^(intsel:\d+|intdone)$"),
            ],
            R_PHOTOS: [MessageHandler((Filters.photo | Filters.text) & (~Filters.command), r_photos)],
            R_VIDEOS: [MessageHandler((Filters.video | Filters.text) & (~Filters.command), r_videos)],
            R_HABITS: [MessageHandler(Filters.text & (~Filters.command), r_habits)],
        },
        fallbacks=[],
        allow_reentry=True,
    )
