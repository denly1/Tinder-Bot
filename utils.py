from telegram import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
import re
from datetime import date
from pathlib import Path
from uuid import uuid4

# –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã, –æ—Ç 2 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤)
def validate_name(name: str) -> bool:
    return bool(re.fullmatch(r"[–ê-–Ø–∞-—èA-Za-z–Å—ë\s]{2,30}", name.strip()))

# –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞ (–æ—Ç 18 –¥–æ 99)
def validate_age(age_str: str) -> bool:
    if not age_str.isdigit():
        return False
    age = int(age_str)
    return 18 <= age <= 99

# –í–∞–ª–∏–¥–∞—Ü–∏—è –≥–æ—Ä–æ–¥–∞ (–æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤, –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã)
def validate_city(city: str) -> bool:
    return bool(re.fullmatch(r"[–ê-–Ø–∞-—èA-Za-z–Å—ë\s]{2,50}", city.strip()))

# –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ - —Å–ø–∏—Å–æ–∫ –∏–∑ –∑–∞–¥–∞–Ω–Ω—ã—Ö
INTERESTS_LIST = [
    "üéµ –ú—É–∑—ã–∫–∞", "‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ", "üìö –ß—Ç–µ–Ω–∏–µ", "üé® –î–∏–∑–∞–π–Ω", "üìù –ë–ª–æ–≥–∏–Ω–≥",
    "üöó –ú–∞—à–∏–Ω—ã", "üßµ –†—É–∫–æ–¥–µ–ª–∏–µ", "‚ò¶Ô∏è –†–µ–ª–∏–≥–∏—è", "üà∑Ô∏è –ò–∑—É—á–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤", "üíº –†–∞–±–æ—Ç–∞",
    "üèãÔ∏è‚Äç‚ôÇÔ∏è –°–ø–æ—Ä—Ç", "üéÆ –ò–≥—Ä—ã", "üíÉ –¢–∞–Ω—Ü—ã", "üé¨ –ö–∏–Ω–æ –∏ –°–µ—Ä–∏–∞–ª—ã", "üç≥ –ö—É–ª–∏–Ω–∞—Ä–∏—è",
    "üñåÔ∏è –†–∏—Å–æ–≤–∞–Ω–∏–µ", "ü§ù –í–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ"
]

def validate_interests(selected: list) -> bool:
    return all(item in INTERESTS_LIST for item in selected)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ (–º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–∞—è)
def get_interests_keyboard():
    keyboard = []
    row = []
    for i, interest in enumerate(INTERESTS_LIST, 1):
        row.append(interest)
        if i % 3 == 0:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    return ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–ª–∞
def get_gender_self_keyboard():
    keyboard = [["–ü–∞—Ä–µ–Ω—å üë®", "–î–µ–≤—É—à–∫–∞ üë©"]]
    return ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
from telegram import ReplyKeyboardMarkup

def get_admin_menu():
    keyboard = [
        ["–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ üìä", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìà"],
        ["–í—ã–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π CSV üìÑ", "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚õî"],
        ["–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚úÖ", "–ü—Ä–æ—Å–º–æ—Ç—Ä –∂–∞–ª–æ–± üìù"],
        ["–û—Ç–∫–ª—é—á–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è üîì", "–í–∫–ª—é—á–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è üîí"],
        ["–†–∞—Å—Å—ã–ª–∫–∞ üì®"],
        ["‚Ü©Ô∏è –í—ã—Ö–æ–¥"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ VIP –ø–æ–∫—É–ø–∫–∏
def get_vip_inline_keyboard(payment_id: str | None = None):
    buttons = []
    buttons.append([InlineKeyboardButton("–ö—É–ø–∏—Ç—å VIP 300‚ÇΩ", callback_data="vip:buy")])
    if payment_id:
        buttons.append([InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"vip:check:{payment_id}")])
    return InlineKeyboardMarkup(buttons)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –≤ —à–∞–≥–∞—Ö –∞–Ω–∫–µ—Ç—ã
def get_done_keyboard():
    return ReplyKeyboardMarkup([["–ì–æ—Ç–æ–≤–æ"]], one_time_keyboard=True, resize_keyboard=True)

def get_skip_keyboard():
    return ReplyKeyboardMarkup([["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]], one_time_keyboard=True, resize_keyboard=True)

def get_done_or_skip_keyboard():
    return ReplyKeyboardMarkup([["–ì–æ—Ç–æ–≤–æ", "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]], one_time_keyboard=True, resize_keyboard=True)

# –ú–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ (–±–µ–∑ —Ä–∞—Å—Å—ã–ª–æ–∫, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ –∂–µ–ª–∞–Ω–∏—é)
def get_moderator_menu():
    keyboard = [
        ["–ü—Ä–æ—Å–º–æ—Ç—Ä –∂–∞–ª–æ–± üìù"],
        ["–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚õî", "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚úÖ"],
        ["‚Ü©Ô∏è –í—ã—Ö–æ–¥"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞ –∏–Ω—Ç–µ—Ä–µ—Å–∞
def get_gender_interest_keyboard():
    keyboard = [
        ["–ü–∞—Ä–Ω–∏ üë¶", "–î–µ–≤—É—à–∫–∏ üëß", "–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã üîÑ"]
    ]
    return ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)


# –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ —Å –≥–∞–ª–æ—á–∫–∞–º–∏
def get_interests_inline_keyboard(selected: list):
    buttons = []
    row = []
    for i, interest in enumerate(INTERESTS_LIST):
        is_selected = interest in selected
        mark = "‚úÖ" if is_selected else "‚òëÔ∏è"
        row.append(InlineKeyboardButton(f"{mark} {interest}", callback_data=f"intsel:{i}"))
        if len(row) == 2:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)
    # –∫–Ω–æ–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    buttons.append([InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="intdone")])
    return InlineKeyboardMarkup(buttons)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_menu(is_admin=False):
    buttons = [
        "–ü—Ä–æ—Ñ–∏–ª—å üë§",
        "–ü–æ–∏—Å–∫ üîé",
        "–°–∏–º–ø–∞—Ç–∏–∏ ‚ù§Ô∏è",
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è",
        "VIP ‚≠ê",
        "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üÜò",
    ]
    keyboard = [buttons[i:i+3] for i in range(0, len(buttons), 3)]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–¥ –∞–Ω–∫–µ—Ç–æ–π (reply, –Ω–µ inline)
def get_profile_actions_keyboard():
    keyboard = [
        ["‚ù§Ô∏è", "üëé"],
        ["üö© –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", "‚Ü©Ô∏è –ú–µ–Ω—é"],
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –í–∞–ª–∏–¥–∞—Ü–∏—è yes/no –¥–ª—è –∫—É—Ä–∏—Ç/–ø—å–µ—Ç/–æ—Ç–Ω–æ—à–µ–Ω–∏—è
SMOKE_OPTIONS = ["üö≠ –ù–µ –∫—É—Ä—é", "üö¨ –ö—É—Ä—é", "üö´ –ù–µ –æ—Ç–≤–µ—á–∞—Ç—å"]
DRINK_OPTIONS = ["üö´ –ù–µ –ø—å—é", "üç∑ –ü—å—é", "üö´ –ù–µ –æ—Ç–≤–µ—á–∞—Ç—å"]
RELATIONSHIP_OPTIONS = ["üíî –ù–µ—Ç", "‚ù§Ô∏è –î–∞", "üö´ –ù–µ –æ—Ç–≤–µ—á–∞—Ç—å"]

def get_smoke_keyboard():
    return ReplyKeyboardMarkup([SMOKE_OPTIONS], one_time_keyboard=True, resize_keyboard=True)

def get_drink_keyboard():
    return ReplyKeyboardMarkup([DRINK_OPTIONS], one_time_keyboard=True, resize_keyboard=True)

def get_relationship_keyboard():
    return ReplyKeyboardMarkup([RELATIONSHIP_OPTIONS], one_time_keyboard=True, resize_keyboard=True)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ (10 –¥–ª—è –æ–±—ã—á–Ω—ã—Ö, –±–µ–∑–ª–∏–º–∏—Ç –¥–ª—è VIP)
def can_view(user):
    from datetime import datetime
    if user['vip']:
        return True
    today = date.today()
    if not user['last_view'] or user['last_view'] < today:
        # –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
        return True
    if user['daily_views'] < 10:
        return True
    return False

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
def format_profile(user):
    interests = ", ".join(user.get('interests', []) or [])
    bio = (user.get('bio') or '').strip()
    smoking = (user.get('smoking') or '').strip()
    drinking = (user.get('drinking') or '').strip()
    relationship = (user.get('relationship') or '').strip()

    def _show(val: str) -> bool:
        return bool(val) and ('–ù–µ –æ—Ç–≤–µ—á–∞—Ç—å' not in val)

    lines = [
        f"–ò–º—è: {user.get('name','')}",
        f"–í–æ–∑—Ä–∞—Å—Ç: {user.get('age','')}",
    ]
    if user.get('city'):
        lines.append(f"–ì–æ—Ä–æ–¥: {user.get('city')}")
    if interests:
        lines.append(f"–ò–Ω—Ç–µ—Ä–µ—Å—ã: {interests}")
    if bio:
        lines.append(f"–û–ø–∏—Å–∞–Ω–∏–µ: {bio}")
    if _show(smoking):
        lines.append(f"–ö—É—Ä—é: {smoking}")
    if _show(drinking):
        lines.append(f"–ü—å—é: {drinking}")
    if _show(relationship):
        lines.append(f"–û—Ç–Ω–æ—à–µ–Ω–∏—è: {relationship}")

    # VIP –ø—Ä–∏–∑–Ω–∞–∫
    try:
        if user.get('vip') is not None:
            lines.append(f"VIP: {'–î–∞' if user.get('vip') else '–ù–µ—Ç'}")
    except Exception:
        pass
    return "\n".join(lines)

# --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ–¥–∏–∞ –≤ –ø–∞–ø–∫–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞ /photos –∏ /videos ---
BASE_MEDIA_DIR = Path('user_media')
BASE_MEDIA_DIR.mkdir(exist_ok=True)


def _unique_file_name(prefix: str, index: int, ext: str) -> str:
    return f"{prefix}_{index}_{uuid4().hex[:8]}{ext}"


def save_photo(tg_file, telegram_id: int, index: int) -> str:
    user_dir = BASE_MEDIA_DIR / str(telegram_id) / 'photos'
    user_dir.mkdir(parents=True, exist_ok=True)
    filename = _unique_file_name(str(telegram_id), index, '.jpg')
    dest = user_dir / filename
    tg_file.download(custom_path=str(dest))
    return str(dest)


def save_video(tg_file, telegram_id: int, index: int) -> str:
    user_dir = BASE_MEDIA_DIR / str(telegram_id) / 'videos'
    user_dir.mkdir(parents=True, exist_ok=True)
    filename = _unique_file_name(str(telegram_id), index, '.mp4')
    dest = user_dir / filename
    tg_file.download(custom_path=str(dest))
    return str(dest)
