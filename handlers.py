import os
import json
import base64
import requests
from datetime import datetime, timedelta
from telegram import (
    Update, ReplyKeyboardMarkup, InputMediaPhoto, InputMediaVideo, InlineKeyboardMarkup, InlineKeyboardButton
)
from telegram.ext import CallbackContext
from db import (
    get_connection,
    get_next_profile_for_user,
    can_increment_view,
    increment_view,
    record_view,
    add_like,
    add_complaint,
    get_new_likes,
    get_unseen_likes,
    mark_inbox_seen,
    count_unseen_likes,
    list_users_for_csv,
    list_complaints,
    is_blocked as db_is_blocked,
    list_active_user_ids,
    set_app_setting,
    is_limits_disabled,
    touch_last_active,
    create_payment_record,
    update_payment_status,
    set_vip_until,
    is_vip_active,
)
from utils import (
    get_main_menu, get_admin_menu, get_moderator_menu,
    format_profile, get_interests_inline_keyboard,
    get_profile_actions_keyboard,
    get_vip_inline_keyboard,
)
from telegram import LabeledPrice

# –ü–∞–ø–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞
PHOTO_DIR = "photos"
VIDEO_DIR = "videos"
# –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–¥–º–∏–Ω–æ–≤: —á–∏—Ç–∞–µ–º –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_ID –∏–ª–∏ ADMIN_IDS (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é/–ø—Ä–æ–±–µ–ª)
_ADMIN_IDS_ENV = os.getenv("ADMIN_IDS") or os.getenv("ADMIN_ID") or ""
try:
    _parsed_ids = [int(x) for x in _ADMIN_IDS_ENV.replace(',', ' ').split() if x.strip()]
except Exception:
    _parsed_ids = []
ADMIN_IDS = set(_parsed_ids) if _parsed_ids else {825042510}
# –ù–∞–±–æ—Ä –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –ë–î/–Ω–∞—Å—Ç—Ä–æ–π–∫–∏). –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–∞–µ—Ç –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
MODERATOR_IDS = set(ADMIN_IDS)
MAX_DAILY_VIEWS = 10

if not os.path.exists(PHOTO_DIR):
    os.mkdir(PHOTO_DIR)
if not os.path.exists(VIDEO_DIR):
    os.mkdir(VIDEO_DIR)

def start(update: Update, context: CallbackContext):
    if db_is_blocked(update.effective_user.id):
        update.message.reply_text("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
        return
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É. –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ.",
        reply_markup=get_main_menu(update.effective_user.id in ADMIN_IDS),
    )

def skip_video(update: Update, context: CallbackContext):
    update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ —Å–µ–π—á–∞—Å.")

def menu_handler(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    is_admin = user_id in ADMIN_IDS
    is_moder = (user_id in MODERATOR_IDS) or is_admin
    try:
        touch_last_active(user_id)
    except Exception:
        pass
    if db_is_blocked(user_id):
        update.message.reply_text("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
        return
    text = update.message.text

    # –û–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω/–º–æ–¥–µ—Ä–∞)
    if is_admin and context.user_data.get('awaiting_broadcast'):
        context.user_data.pop('awaiting_broadcast', None)
        msg = text.strip()
        if not msg:
            update.message.reply_text("–¢–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤—ã–±–æ—Ä —á–µ—Ä–µ–∑ –º–µ–Ω—é.", reply_markup=(get_admin_menu() if is_admin else get_moderator_menu()))
            return
        users = list_active_user_ids()
        sent = 0
        for uid in users:
            try:
                context.bot.send_message(chat_id=uid, text=msg)
                sent += 1
            except Exception:
                pass
        update.message.reply_text(f"–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", reply_markup=(get_admin_menu() if is_admin else get_moderator_menu()))
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –≤–≤–æ–¥–∞ ID –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤/–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤)
    if is_moder and context.user_data.get('awaiting_block_id'):
        context.user_data.pop('awaiting_block_id', None)
        try:
            target_id = int(text)
        except ValueError:
            update.message.reply_text("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤—ã–±–æ—Ä —á–µ—Ä–µ–∑ –º–µ–Ω—é.", reply_markup=(get_admin_menu() if is_admin else get_moderator_menu()))
            return
        conn = get_connection()
        cur = conn.cursor()
        cur.execute("UPDATE users SET blocked = TRUE WHERE telegram_id = %s", (target_id,))
        conn.commit()
        cur.close()
        conn.close()
        update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", reply_markup=(get_admin_menu() if is_admin else get_moderator_menu()))
        return

    if is_moder and context.user_data.get('awaiting_unblock_id'):
        context.user_data.pop('awaiting_unblock_id', None)
        try:
            target_id = int(text)
        except ValueError:
            update.message.reply_text("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤—ã–±–æ—Ä —á–µ—Ä–µ–∑ –º–µ–Ω—é.", reply_markup=(get_admin_menu() if is_admin else get_moderator_menu()))
            return
        conn = get_connection()
        cur = conn.cursor()
        cur.execute("UPDATE users SET blocked = FALSE WHERE telegram_id = %s", (target_id,))
        conn.commit()
        cur.close()
        conn.close()
        update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", reply_markup=(get_admin_menu() if is_admin else get_moderator_menu()))
        return

    if text.startswith("–ü—Ä–æ—Ñ–∏–ª—å"):
        show_profile(update, context)
    elif text.startswith("–ü–æ–∏—Å–∫"):
        show_next_profile(update, context)
    elif text.startswith("–°–∏–º–ø–∞—Ç–∏–∏"):
        show_likes(update, context)
    elif text.startswith("–ù–∞—Å—Ç—Ä–æ–π–∫–∏"):
        settings_menu(update, context)
    elif text.startswith("VIP"):
        active = False
        try:
            active = is_vip_active(user_id)
        except Exception:
            pass
        status = "–ê–∫—Ç–∏–≤–µ–Ω ‚úÖ" if active else "–ù–µ –∞–∫—Ç–∏–≤–µ–Ω ‚ùå"
        vip_text = (
            "üíé VIP-—Å—Ç–∞—Ç—É—Å ‚Äî —Ç–≤–æ–π –∫–ª—é—á –∫ —É—Å–ø–µ—à–Ω—ã–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞–º! üíé\n"
            "üî• –•–æ—á–µ—à—å –≤—ã–π—Ç–∏ –∑–∞ —Ä–∞–º–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π? üî•\n"
            "–° VIP —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å:\n"
            "‚úÖ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø ‚Äî —Å–º–æ—Ç—Ä–∏ –∞–Ω–∫–µ—Ç—ã –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≤ –¥–µ–Ω—å.\n"
            "‚úÖ –ü—Ä—è–º—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã ‚Äî –≤–∏–¥–∏—à—å @—é–∑–µ—Ä–Ω–µ–π–º—ã –ª—é–¥–µ–π –∏ –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –∏–º –Ω–∞–ø—Ä—è–º—É—é, –Ω–µ –¥–æ–∂–∏–¥–∞—è—Å—å –≤–∑–∞–∏–º–Ω–æ–≥–æ –ª–∞–π–∫–∞!\n"
            "(–†–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ —É —á–µ–ª–æ–≤–µ–∫–∞ –µ—Å—Ç—å —é–∑–µ—Ä–Ω–µ–π–º –∏ –æ–Ω –Ω–µ —Å–∫—Ä—ã–ª –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏)\n"
            "‚úÖ –ë–æ–ª—å—à–µ matches ‚Äî —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞ —á–∞—â–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥—Ä—É–≥–∏–º, –∞ –∑–Ω–∞—á–∏—Ç, —à–∞–Ω—Å—ã –Ω–∞ –≤–∑–∞–∏–º–Ω—ã–µ —Å–∏–º–ø–∞—Ç–∏–∏ –≤—ã—Ä–∞—Å—Ç–∞—é—Ç –≤ —Ä–∞–∑—ã!\n"
            "üöÄ –ù–µ —É–ø—É—Å—Ç–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –ø–µ—Ä–≤—ã–º!\n"
            "–ß–µ–º —Ä–∞–Ω—å—à–µ —Ç—ã —Å—Ç–∞–Ω–µ—à—å VIP ‚Äî —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ –Ω–∞–π–¥—ë—à—å —Ç–æ–≥–æ, –∫—Ç–æ —Ç–µ–±–µ –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É –ø–æ–¥—Ö–æ–¥–∏—Ç.\n"
            "üí¨ P.S. –°–∞–º—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ª—é–¥–∏ —á–∞—Å—Ç–æ —Å–∫—Ä—ã–≤–∞—é—Ç—Å—è –∑–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å—é ‚Äî –Ω–æ —Å VIP —Ç—ã —Å–º–æ–∂–µ—à—å —É–≤–∏–¥–µ—Ç—å –∏—Ö –ø–µ—Ä–≤—ã–º!\n"
            "‚ú® –ê–∫—Ç–∏–≤–∏—Ä—É–π VIP —Å–µ–π—á–∞—Å –∏ –æ—Ç–∫—Ä–æ–π –≤—Å–µ –¥–≤–µ—Ä–∏ –∫ –Ω–æ–≤—ã–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞–º\n\n"
            f"–°—Ç–∞—Ç—É—Å VIP: {status}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: 300 ‚ÇΩ / –º–µ—Å—è—Ü"
        )
        update.message.reply_text(vip_text, reply_markup=get_vip_inline_keyboard())
    elif text.startswith("–ü–æ–¥–¥–µ—Ä–∂–∫–∞"):
        update.message.reply_text(
            "–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞: https://t.me/your_support_channel\n–ê–¥–º–∏–Ω: @your_admin",
            reply_markup=get_main_menu(is_admin),
        )
    elif (text.startswith("–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤")) and is_admin:
        admin_views_history(update, context)
    elif (text.startswith("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")) and is_admin:
        admin_stats(update, context)
    elif (text.startswith("–í—ã–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π CSV") or text.startswith("–í—ã–≥—Ä—É–∑–∫–∞ CSV")) and is_admin:
        users_csv(update, context)
    elif text.startswith("–ü—Ä–æ—Å–º–æ—Ç—Ä –∂–∞–ª–æ–±") and (is_admin or is_moder):
        complaints_list(update, context)
    elif text.startswith("–û—Ç–∫–ª—é—á–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è") and is_admin:
        set_app_setting("limits_disabled", "true")
        update.message.reply_text("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–∏–¥—è—Ç –∞–Ω–∫–µ—Ç—ã –±–µ–∑ –ª–∏–º–∏—Ç–æ–≤.", reply_markup=get_admin_menu())
    elif text.startswith("–í–∫–ª—é—á–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è") and is_admin:
        set_app_setting("limits_disabled", "false")
        update.message.reply_text("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã: –æ–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–Ω–æ–≤–∞ –∏–º–µ—é—Ç –ª–∏–º–∏—Ç.", reply_markup=get_admin_menu())
    elif text.startswith("–†–∞—Å—Å—ã–ª–∫–∞") and is_admin:
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏. –û–Ω –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", reply_markup=get_admin_menu())
        context.user_data['awaiting_broadcast'] = True
    elif text.startswith("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è") and (is_admin or is_moder):
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:", reply_markup=(get_admin_menu() if is_admin else get_moderator_menu()))
        context.user_data['awaiting_block_id'] = True
    elif text.startswith("–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è") and (is_admin or is_moder):
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:", reply_markup=(get_admin_menu() if is_admin else get_moderator_menu()))
        context.user_data['awaiting_unblock_id'] = True
    elif text in ["‚Ü©Ô∏è –í—ã—Ö–æ–¥"] and (is_admin or is_moder):
        update.message.reply_text("–í—ã—Ö–æ–¥ –∏–∑ –º–µ–Ω—é.", reply_markup=get_main_menu(False))
    # –î–µ–π—Å—Ç–≤–∏—è –ø–æ–¥ –∞–Ω–∫–µ—Ç–æ–π (reply-–∫–Ω–æ–ø–∫–∏)
    elif text == "‚ù§Ô∏è":
        to_user = context.user_data.get('current_profile')
        if not to_user:
            show_next_profile(update, context)
            return
        mutual = add_like(user_id, to_user)
        if mutual:
            try:
                u1 = context.bot.get_chat(user_id); u1n = f"@{u1.username}" if getattr(u1, 'username', None) else str(user_id)
            except Exception:
                u1n = str(user_id)
            try:
                u2 = context.bot.get_chat(to_user); u2n = f"@{u2.username}" if getattr(u2, 'username', None) else str(to_user)
            except Exception:
                u2n = str(to_user)
            context.bot.send_message(chat_id=user_id, text=f"–í–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è —Å {u2n}!")
            context.bot.send_message(chat_id=to_user, text=f"–í–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è —Å {u1n}!")
        # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é –ª–∞–π–∫–∞ (–∫–æ—Ä–æ—Ç–∫–æ)
        try:
            cnt = count_unseen_likes(to_user)
            if cnt > 0:
                note = f"–í–∞–º –ø–æ—Å—Ç–∞–≤–∏–ª–∏ —Å–∏–º–ø–∞—Ç–∏–∏: {cnt}." if cnt > 1 else "–í–∞–º –ø–æ—Å—Ç–∞–≤–∏–ª–∏ —Å–∏–º–ø–∞—Ç–∏—é."
                kb = InlineKeyboardMarkup([[InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data="see_likes")]])
                context.bot.send_message(chat_id=to_user, text=note, reply_markup=kb)
        except Exception:
            pass
        # –ø–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É
        show_next_profile(update, context)
    elif text == "üëé":
        show_next_profile(update, context)
    elif text.startswith("‚Ü©Ô∏è"):
        update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_menu(is_admin))
    elif text.startswith("üö© –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è"):
        to_user = context.user_data.get('current_profile')
        if to_user:
            add_complaint(user_id, to_user)
            update.message.reply_text("–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º.")
        show_next_profile(update, context)
    else:
        update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", reply_markup=get_main_menu(is_admin))

def show_profile(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if db_is_blocked(user_id):
        update.message.reply_text("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
        return
    conn = get_connection()
    cur = conn.cursor()
    cur.execute(
        "SELECT name, age, city, gender_interest, interests, photos, videos, vip FROM users WHERE telegram_id=%s",
        (user_id,),
    )
    user = cur.fetchone()
    cur.close()
    conn.close()
    if not user:
        update.message.reply_text("–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å.", reply_markup=get_main_menu())
        return
    name = user["name"]
    age = user["age"]
    city = user["city"]
    gender_interest = user["gender_interest"]
    interests = user.get("interests") or []
    photos = user.get("photos") or []
    videos = user.get("videos") or []
    vip = user.get("vip", False)
    interests_str = ", ".join(interests)
    vip_status = "–î–∞" if vip else "–ù–µ—Ç"
    bio = user.get("bio") or ""
    text = (
        f"üë§ –ò–º—è: {name}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {age}\n"
        f"–ì–æ—Ä–æ–¥: {city}\n"
        f"–ò—â—É: {gender_interest}\n"
        f"–ò–Ω—Ç–µ—Ä–µ—Å—ã: {interests_str}\n"
        + (f"–û–ø–∏—Å–∞–Ω–∏–µ: {bio}\n" if bio else "") +
        f"VIP: {vip_status}"
    )
    media = []
    for p in photos:
        if p and os.path.exists(p):
            media.append(InputMediaPhoto(open(p, 'rb')))
    for v in videos:
        if v and os.path.exists(v):
            media.append(InputMediaVideo(open(v, 'rb')))
    if not media:
        update.message.reply_text(text)
    elif len(media) == 1:
        first = media[0]
        if isinstance(first, InputMediaPhoto):
            update.message.reply_photo(photo=first.media, caption=text)
        else:
            update.message.reply_video(video=first.media, caption=text)
    else:
        # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ caption –∫ –ø–µ—Ä–≤–æ–º—É –º–µ–¥–∏–∞, —á—Ç–æ–±—ã –±—ã–ª–æ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ-–≥—Ä—É–ø–ø–∞
        first = media[0]
        if isinstance(first, InputMediaPhoto):
            media[0] = InputMediaPhoto(first.media, caption=text)
        else:
            media[0] = InputMediaVideo(first.media, caption=text)
        update.message.reply_media_group(media)

    update.message.reply_text("–î–ª—è –∂–∞–ª–æ–±—ã –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥ –∞–Ω–∫–µ—Ç–æ–π –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /complain <telegram_id>.", reply_markup=get_main_menu())


def _profile_inline_kb(profile_telegram_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton("üëç –õ–∞–π–∫", callback_data=f"like:{profile_telegram_id}"),
                InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="next")
            ],
            [InlineKeyboardButton("üö© –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", callback_data=f"complain:{profile_telegram_id}")],
        ]
    )


def show_next_profile(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if db_is_blocked(user_id):
        update.message.reply_text("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
        return
    # –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–ª–∏—á–∏–µ —Å–≤–æ–µ–π –∞–Ω–∫–µ—Ç—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø–æ–∏—Å–∫–∞
    conn = get_connection()
    cur = conn.cursor()
    cur.execute("SELECT 1 FROM users WHERE telegram_id=%s", (user_id,))
    has_me = cur.fetchone() is not None
    cur.close()
    conn.close()
    if not has_me:
        update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É —á–µ—Ä–µ–∑ /start.")
        return
    if not can_increment_view(user_id):
        upsell = (
            "‚ú® –¢–≤–æ–π –ª–∏—á–Ω—ã–π –ª–∏–º–∏—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –ø–æ—á—Ç–∏ –∏—Å—á–µ—Ä–ø–∞–Ω! ‚ú®\n"
            "–°–µ–≥–æ–¥–Ω—è —Ç—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª(–∞) *10 –∏–∑ 10* –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∫–µ—Ç.\n"
            "–•–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–æ–∏—Å–∫–∏ —Å–≤–æ–µ–π –∏–¥–µ–∞–ª—å–Ω–æ–π –ø–∞—Ä—ã?\n\n"
            "\nüíé VIP-—Å—Ç–∞—Ç—É—Å ‚Äî —Ç–≤–æ–π –∫–ª—é—á –∫ —É—Å–ø–µ—à–Ω—ã–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞–º! üíé\n"
            "üî• –•–æ—á–µ—à—å –≤—ã–π—Ç–∏ –∑–∞ —Ä–∞–º–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π? üî•\n"
            "–° VIP —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å:\n"
            "‚úÖ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø ‚Äî —Å–º–æ—Ç—Ä–∏ –∞–Ω–∫–µ—Ç—ã –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≤ –¥–µ–Ω—å.\n"
            "‚úÖ –ü—Ä—è–º—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã ‚Äî –≤–∏–¥–∏—à—å @—é–∑–µ—Ä–Ω–µ–π–º—ã –ª—é–¥–µ–π –∏ –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –∏–º –Ω–∞–ø—Ä—è–º—É—é, –Ω–µ –¥–æ–∂–∏–¥–∞—è—Å—å –≤–∑–∞–∏–º–Ω–æ–≥–æ –ª–∞–π–∫–∞!\n"
            "(–†–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ —É —á–µ–ª–æ–≤–µ–∫–∞ –µ—Å—Ç—å —é–∑–µ—Ä–Ω–µ–π–º –∏ –æ–Ω –Ω–µ —Å–∫—Ä—ã–ª –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏)\n\n"
            "üöÄ –ù–µ —É–ø—É—Å—Ç–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –ø–µ—Ä–≤—ã–º!\n"
            "–ß–µ–º —Ä–∞–Ω—å—à–µ —Ç—ã —Å—Ç–∞–Ω–µ—à—å VIP ‚Äî —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ –Ω–∞–π–¥—ë—à—å —Ç–æ–≥–æ, –∫—Ç–æ —Ç–µ–±–µ –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É –ø–æ–¥—Ö–æ–¥–∏—Ç.\n"
            "üí¨ P.S. –°–∞–º—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ª—é–¥–∏ —á–∞—Å—Ç–æ —Å–∫—Ä—ã–≤–∞—é—Ç—Å—è –∑–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å—é ‚Äî –Ω–æ —Å VIP —Ç—ã —Å–º–æ–∂–µ—à—å —É–≤–∏–¥–µ—Ç—å –∏—Ö –ø–µ—Ä–≤—ã–º!\n"
            "‚ú® –ê–∫—Ç–∏–≤–∏—Ä—É–π VIP —Å–µ–π—á–∞—Å –∏ –æ—Ç–∫—Ä–æ–π –≤—Å–µ –¥–≤–µ—Ä–∏ –∫ –Ω–æ–≤—ã–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞–º! ‚ú®"
        )
        (update.message or update.callback_query.message).reply_text(upsell, reply_markup=get_vip_inline_keyboard())
        return
    profile = get_next_profile_for_user(user_id)
    if not profile:
        (update.message or update.callback_query.message).reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –∞–Ω–∫–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.", reply_markup=get_main_menu())
        return
    increment_view(user_id)
    record_view(user_id, profile["telegram_id"])
    # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è reply-–∫–Ω–æ–ø–æ–∫
    context.user_data['current_profile'] = profile["telegram_id"]
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã. –î–ª—è VIP –ø–æ–∫–∞–∑—ã–≤–∞–µ–º @username, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    try:
        # –£–∑–Ω–∞–µ–º, VIP –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        conn = get_connection(); cur = conn.cursor()
        cur.execute("SELECT vip FROM users WHERE telegram_id=%s", (user_id,))
        row = cur.fetchone(); cur.close(); conn.close()
        viewer_is_vip = bool(row and row.get('vip'))
    except Exception:
        viewer_is_vip = False
    uname = ""
    if viewer_is_vip:
        try:
            chat = context.bot.get_chat(profile["telegram_id"]) ; uname = f"@{chat.username}" if getattr(chat, 'username', None) else ""
        except Exception:
            uname = ""
    # –±–∞–∑–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    text = format_profile(profile)
    if viewer_is_vip and uname:
        text = f"{text}\n–ö–æ–Ω—Ç–∞–∫—Ç: {uname}"
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø–æ–π —Å caption –Ω–∞ –ø–µ—Ä–≤–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    media = []
    for p in profile.get("photos", []) or []:
        if p and os.path.exists(p):
            media.append(InputMediaPhoto(open(p, 'rb')))
    for v in profile.get("videos", []) or []:
        if v and os.path.exists(v):
            media.append(InputMediaVideo(open(v, 'rb')))
    if not media:
        (update.message or update.callback_query.message).reply_text(text, reply_markup=get_main_menu())
    elif len(media) == 1:
        first = media[0]
        if isinstance(first, InputMediaPhoto):
            (update.message or update.callback_query.message).reply_photo(photo=first.media, caption=text)
        else:
            (update.message or update.callback_query.message).reply_video(video=first.media, caption=text)
    else:
        first = media[0]
        if isinstance(first, InputMediaPhoto):
            media[0] = InputMediaPhoto(first.media, caption=text)
        else:
            media[0] = InputMediaVideo(first.media, caption=text)
        (update.message or update.callback_query.message).reply_media_group(media)
    # –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –∞–Ω–∫–µ—Ç–æ–π (reply)
    (update.message or update.callback_query.message).reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_profile_actions_keyboard())


def show_likes(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    rows = get_new_likes(user_id)
    if not rows:
        update.message.reply_text("–ù–æ–≤—ã—Ö —Å–∏–º–ø–∞—Ç–∏–π –Ω–µ—Ç.", reply_markup=get_main_menu())
        return
    text_lines = ["–ù–æ–≤—ã–µ —Å–∏–º–ø–∞—Ç–∏–∏:"]
    # –°–æ–±–µ—Ä—ë–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ from_user –∏ –ø–æ–ª—É—á–∏–º –∏—Ö username –∏–ª–∏ –∏–º—è
    for r in rows:
        from_id = r['from_user'] if isinstance(r, dict) else r[0]
        created = r['created_at'] if isinstance(r, dict) else r[1]
        try:
            chat = context.bot.get_chat(from_id)
            uname = f"@{chat.username}" if getattr(chat, 'username', None) else None
        except Exception:
            uname = None
        display = uname
        if not display:
            # fallback –∫ –∏–º–µ–Ω–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –≤ –ë–î
            try:
                from db import get_user
                u = get_user(from_id)
                display = u.get('name') if u else str(from_id)
            except Exception:
                display = str(from_id)
        text_lines.append(f"–û—Ç: {display} ({created})")
    update.message.reply_text("\n".join(text_lines), reply_markup=get_main_menu())

def _send_full_profile(context: CallbackContext, chat_id: int, profile_user_id: int):
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ –ë–î
    conn = get_connection()
    cur = conn.cursor()
    cur.execute(
        """
        SELECT name, age, city, gender_interest, interests, photos, videos,
               vip, bio, smoking, drinking, relationship
        FROM users WHERE telegram_id=%s
        """,
        (profile_user_id,),
    )
    user = cur.fetchone()
    cur.close()
    conn.close()
    if not user:
        try:
            context.bot.send_message(chat_id=chat_id, text="–ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        except Exception:
            pass
        return
    # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å @username
    try:
        chat = context.bot.get_chat(profile_user_id)
        uname = f"@{chat.username}" if getattr(chat, 'username', None) else ""
    except Exception:
        uname = ""
    bio = (user.get('bio') or '').strip()
    smoking = (user.get('smoking') or '').strip()
    drinking = (user.get('drinking') or '').strip()
    relationship = (user.get('relationship') or '').strip()
    def _show(val: str) -> bool:
        return bool(val) and ('–ù–µ –æ—Ç–≤–µ—á–∞—Ç—å' not in val)
    lines = [
        f"üë§ –ò–º—è: {user.get('name','')}{' ('+uname+')' if uname else ''}",
        f"–í–æ–∑—Ä–∞—Å—Ç: {user.get('age','')}",
        f"–ì–æ—Ä–æ–¥: {user.get('city','')}",
        f"–ò—â—É: {user.get('gender_interest','')}",
        f"–ò–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(user.get('interests') or [])}",
    ]
    if bio:
        lines.append(f"–û–ø–∏—Å–∞–Ω–∏–µ: {bio}")
    if _show(smoking):
        lines.append(f"–ö—É—Ä—é: {smoking}")
    if _show(drinking):
        lines.append(f"–ü—å—é: {drinking}")
    if _show(relationship):
        lines.append(f"–û—Ç–Ω–æ—à–µ–Ω–∏—è: {relationship}")
    lines.append(f"VIP: {'–î–∞' if user.get('vip') else '–ù–µ—Ç'}")
    text = "\n".join(lines)
    media = []
    for p in (user.get('photos') or []):
        if p and os.path.exists(p):
            media.append(InputMediaPhoto(open(p, 'rb')))
    for v in (user.get('videos') or []):
        if v and os.path.exists(v):
            media.append(InputMediaVideo(open(v, 'rb')))
    try:
        if not media:
            context.bot.send_message(chat_id=chat_id, text=text)
        elif len(media) == 1:
            first = media[0]
            if isinstance(first, InputMediaPhoto):
                context.bot.send_photo(chat_id=chat_id, photo=first.media, caption=text)
            else:
                context.bot.send_video(chat_id=chat_id, video=first.media, caption=text)
        else:
            first = media[0]
            if isinstance(first, InputMediaPhoto):
                media[0] = InputMediaPhoto(first.media, caption=text)
            else:
                media[0] = InputMediaVideo(first.media, caption=text)
            context.bot.send_media_group(chat_id=chat_id, media=media)
    except Exception:
        pass


def _send_profile_without_username(context: CallbackContext, chat_id: int, profile_user_id: int):
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ –ë–î. –î–ª—è VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (viewer=chat_id) –ø–æ–∫–∞–∑—ã–≤–∞–µ–º @username, –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ ‚Äî —Å–∫—Ä—ã–≤–∞–µ–º.
    conn = get_connection()
    cur = conn.cursor()
    cur.execute(
        """
        SELECT name, age, city, gender_interest, interests, photos, videos,
               vip, bio, smoking, drinking, relationship
        FROM users WHERE telegram_id=%s
        """,
        (profile_user_id,),
    )
    user = cur.fetchone()
    # —É–∑–Ω–∞–µ–º VIP —Å—Ç–∞—Ç—É—Å —Å–º–æ—Ç—Ä—è—â–µ–≥–æ
    cur.execute("SELECT vip FROM users WHERE telegram_id=%s", (chat_id,))
    viewer_row = cur.fetchone()
    cur.close()
    conn.close()
    if not user:
        try:
            context.bot.send_message(chat_id=chat_id, text="–ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        except Exception:
            pass
        return
    bio = (user.get('bio') or '').strip()
    smoking = (user.get('smoking') or '').strip()
    drinking = (user.get('drinking') or '').strip()
    relationship = (user.get('relationship') or '').strip()
    def _show(val: str) -> bool:
        return bool(val) and ('–ù–µ –æ—Ç–≤–µ—á–∞—Ç—å' not in val)
    lines = [
        f"üë§ –ò–º—è: {user.get('name','')}",
        f"–í–æ–∑—Ä–∞—Å—Ç: {user.get('age','')}",
        f"–ì–æ—Ä–æ–¥: {user.get('city','')}",
        f"–ò—â—É: {user.get('gender_interest','')}",
        f"–ò–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(user.get('interests') or [])}",
    ]
    if bio:
        lines.append(f"–û–ø–∏—Å–∞–Ω–∏–µ: {bio}")
    if _show(smoking):
        lines.append(f"–ö—É—Ä—é: {smoking}")
    if _show(drinking):
        lines.append(f"–ü—å—é: {drinking}")
    if _show(relationship):
        lines.append(f"–û—Ç–Ω–æ—à–µ–Ω–∏—è: {relationship}")
    lines.append(f"VIP: {'–î–∞' if user.get('vip') else '–ù–µ—Ç'}")
    text = "\n".join(lines)
    # –ï—Å–ª–∏ —Å–º–æ—Ç—Ä—è—â–∏–π ‚Äî VIP, –ø–æ–∫–∞–∂–µ–º @username, –µ—Å–ª–∏ –µ—Å—Ç—å
    try:
        viewer_is_vip = bool(viewer_row and viewer_row.get('vip'))
    except Exception:
        viewer_is_vip = False
    if viewer_is_vip:
        try:
            chat = context.bot.get_chat(profile_user_id)
            uname = f"@{chat.username}" if getattr(chat, 'username', None) else ""
        except Exception:
            uname = ""
        if uname:
            text = f"{text}\n–ö–æ–Ω—Ç–∞–∫—Ç: {uname}"
    media = []
    for p in (user.get('photos') or []):
        if p and os.path.exists(p):
            media.append(InputMediaPhoto(open(p, 'rb')))
    for v in (user.get('videos') or []):
        if v and os.path.exists(v):
            media.append(InputMediaVideo(open(v, 'rb')))
    try:
        if not media:
            context.bot.send_message(chat_id=chat_id, text=text)
        elif len(media) == 1:
            first = media[0]
            if isinstance(first, InputMediaPhoto):
                context.bot.send_photo(chat_id=chat_id, photo=first.media, caption=text)
            else:
                context.bot.send_video(chat_id=chat_id, video=first.media, caption=text)
        else:
            first = media[0]
            if isinstance(first, InputMediaPhoto):
                media[0] = InputMediaPhoto(first.media, caption=text)
            else:
                media[0] = InputMediaVideo(first.media, caption=text)
            context.bot.send_media_group(chat_id=chat_id, media=media)
    except Exception:
        pass


def settings_menu(update: Update, context: CallbackContext):
    # –ö–æ—Ä–æ—Ç–∫–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    user_id = update.effective_user.id
    conn = get_connection()
    cur = conn.cursor()
    cur.execute("SELECT name, age, city, gender_interest, interests, age_min_preference, age_max_preference, city_filter_enabled FROM users WHERE telegram_id=%s", (user_id,))
    u = cur.fetchone()
    cur.close()
    conn.close()
    if not u:
        update.message.reply_text("–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å.", reply_markup=get_main_menu())
        return
    name, age, city, gi, interests = u["name"], u["age"], u["city"], u["gender_interest"], u["interests"]
    amin = u.get("age_min_preference")
    amax = u.get("age_max_preference")
    cfilter = bool(u.get("city_filter_enabled") if u.get("city_filter_enabled") is not None else True)
    age_pref_text = f"{amin}-{amax}" if amin and amax else "–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
    city_filter_text = "–í–∫–ª" if cfilter else "–í—ã–∫–ª"
    text = (
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:\n"
        f"–ò–º—è: {name}\n–í–æ–∑—Ä–∞—Å—Ç: {age}\n–ì–æ—Ä–æ–¥: {city}\n–ò—â—É: {gi}\n–ò–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(interests) if interests else '‚Äî'}\n\n"
        f"–§–∏–ª—å—Ç—Ä –≤–æ–∑—Ä–∞—Å—Ç–∞: {age_pref_text}\n–§–∏–ª—å—Ç—Ä –≥–æ—Ä–æ–¥–∞: {city_filter_text}"
    )
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="edit:name"), InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç", callback_data="edit:age")],
        [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data="edit:city"), InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit:bio")],
        [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏", callback_data="photos:change"), InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã", callback_data="intdone_force_open")],
        [InlineKeyboardButton("–§–∏–ª—å—Ç—Ä –≤–æ–∑—Ä–∞—Å—Ç–∞", callback_data="agepref:start"), InlineKeyboardButton("–§–∏–ª—å—Ç—Ä –≥–æ—Ä–æ–¥–∞ –í–∫–ª/–í—ã–∫–ª", callback_data="cityfilter:toggle")],
        [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="delete:confirm")],
    ])
    update.message.reply_text(text, reply_markup=kb)



def complain_command(update: Update, context: CallbackContext):
    if db_is_blocked(update.effective_user.id):
        update.message.reply_text("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
        return
    if len(context.args) != 1:
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /complain <telegram_id>", reply_markup=get_main_menu())
        return
    try:
        reported_id = int(context.args[0])
    except ValueError:
        update.message.reply_text("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.", reply_markup=get_main_menu())
        return
    reporter_id = update.effective_user.id
    reason = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∂–∞–ª–æ–≤–∞–ª—Å—è —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É"
    add_complaint(reporter_id, reported_id, reason)
    update.message.reply_text(f"–ñ–∞–ª–æ–±–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {reported_id} –ø—Ä–∏–Ω—è—Ç–∞.", reply_markup=get_main_menu())


def on_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    data = query.data
    user_id = query.from_user.id
    if data == "next":
        query.answer()
        # –ø—Ä–æ–∫–∏–Ω–µ–º –≤ –æ–±—ã—á–Ω—ã–π –ø–æ—Ç–æ–∫
        show_next_profile(update, context)
        return
    if data.startswith("like:"):
        to_user = int(data.split(":", 1)[1])
        query.answer("–õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        mutual = add_like(user_id, to_user)
        if mutual:
            # –ü–æ–ø—Ä–æ–±—É–µ–º —É–∫–∞–∑–∞—Ç—å username
            try:
                u1 = context.bot.get_chat(user_id); u1n = f"@{u1.username}" if getattr(u1, 'username', None) else str(user_id)
            except Exception:
                u1n = str(user_id)
            try:
                u2 = context.bot.get_chat(to_user); u2n = f"@{u2.username}" if getattr(u2, 'username', None) else str(to_user)
            except Exception:
                u2n = str(to_user)
            context.bot.send_message(chat_id=user_id, text=f"–í–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è —Å {u2n}!")
            context.bot.send_message(chat_id=to_user, text=f"–í–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è —Å {u1n}!")
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é –ª–∞–π–∫–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å"
        try:
            likes = get_new_likes(to_user) or []
            cnt = len(likes)
            note = "–ö–æ–º—É-—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞" if cnt < 3 else f"–ö–æ–º—É-—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ (–µ—â—ë {cnt})"
            kb = InlineKeyboardMarkup([[InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data="see_likes")]])
            context.bot.send_message(chat_id=to_user, text=note, reply_markup=kb)
        except Exception:
            pass
        return
    if data.startswith("complain:"):
        reported_id = int(data.split(":", 1)[1])
        add_complaint(user_id, reported_id)
        query.answer("–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        context.bot.send_message(chat_id=user_id, text="–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    if data.startswith("compview:"):
        # –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª–Ω–æ–π –∞–Ω–∫–µ—Ç—ã –ø–æ –∂–∞–ª–æ–±–µ: —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞/–º–æ–¥–µ—Ä–∞
        rid = update.effective_user.id
        if (rid not in ADMIN_IDS) and (rid not in MODERATOR_IDS):
            query.answer()
            context.bot.send_message(chat_id=rid, text="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return
        try:
            target = int(data.split(":",1)[1])
        except Exception:
            query.answer()
            return
        query.answer()
        _send_full_profile(context, rid, target)
        return
    if data == "see_likes":
        query.answer()
        rows = get_unseen_likes(user_id)
        if not rows:
            context.bot.send_message(chat_id=user_id, text="–°–∏–º–ø–∞—Ç–∏–π –±–æ–ª—å—à–µ –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ü–æ–∏—Å–∫ —á—Ç–æ–±—ã —Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã.")
            return
        queue = [ (r['from_user'] if isinstance(r, dict) else r[0]) for r in rows ]
        context.user_data['likes_queue'] = queue
        # –æ—Ç–ø—Ä–∞–≤–∏–º –ø–µ—Ä–≤—É—é
        next_id = context.user_data['likes_queue'].pop(0)
        context.user_data['current_like_from'] = next_id
        _send_profile_without_username(context, user_id, next_id)
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("‚ù§Ô∏è", callback_data=f"likes:like:{next_id}"), InlineKeyboardButton("üëé", callback_data=f"likes:dislike:{next_id}")]])
        context.bot.send_message(chat_id=user_id, text="–í–∞—à–∞ —Ä–µ–∞–∫—Ü–∏—è?", reply_markup=kb)
        return
    if data.startswith("likes:like:"):
        to_like = int(data.split(":", 2)[2])
        query.answer("–õ–∞–π–∫")
        mutual = add_like(user_id, to_like)
        # –ø–æ–º–µ—Ç–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–º
        try:
            mark_inbox_seen(user_id, to_like)
        except Exception:
            pass
        if mutual:
            # —Ä–∞—Å–∫—Ä–æ–µ–º username —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                u = context.bot.get_chat(to_like); uname = f"@{u.username}" if getattr(u, 'username', None) else str(to_like)
            except Exception:
                uname = str(to_like)
            context.bot.send_message(chat_id=user_id, text=f"–í–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è —Å {uname}!")
        # –ø–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        queue = context.user_data.get('likes_queue', [])
        if queue:
            next_id = queue.pop(0)
            context.user_data['likes_queue'] = queue
            context.user_data['current_like_from'] = next_id
            _send_profile_without_username(context, user_id, next_id)
            kb = InlineKeyboardMarkup([[InlineKeyboardButton("‚ù§Ô∏è", callback_data=f"likes:like:{next_id}"), InlineKeyboardButton("üëé", callback_data=f"likes:dislike:{next_id}")]])
            context.bot.send_message(chat_id=user_id, text="–í–∞—à–∞ —Ä–µ–∞–∫—Ü–∏—è?", reply_markup=kb)
        else:
            context.bot.send_message(chat_id=user_id, text="–°–∏–º–ø–∞—Ç–∏–π –±–æ–ª—å—à–µ –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ü–æ–∏—Å–∫ —á—Ç–æ–±—ã —Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã.")
        return
    if data.startswith("likes:dislike:"):
        to_dislike = int(data.split(":", 2)[2])
        query.answer("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
        try:
            mark_inbox_seen(user_id, to_dislike)
        except Exception:
            pass
        queue = context.user_data.get('likes_queue', [])
        if queue:
            next_id = queue.pop(0)
            context.user_data['likes_queue'] = queue
            context.user_data['current_like_from'] = next_id
            _send_profile_without_username(context, user_id, next_id)
            kb = InlineKeyboardMarkup([[InlineKeyboardButton("‚ù§Ô∏è", callback_data=f"likes:like:{next_id}"), InlineKeyboardButton("üëé", callback_data=f"likes:dislike:{next_id}")]])
            context.bot.send_message(chat_id=user_id, text="–í–∞—à–∞ —Ä–µ–∞–∫—Ü–∏—è?", reply_markup=kb)
        else:
            context.bot.send_message(chat_id=user_id, text="–°–∏–º–ø–∞—Ç–∏–π –±–æ–ª—å—à–µ –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ü–æ–∏—Å–∫ —á—Ç–æ–±—ã —Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã.")
        return
    # VIP —á–µ—Ä–µ–∑ Telegram Payments
    if data == "vip:buy":
        query.answer()
        _send_vip_invoice(context, user_id)
        return

# --- –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã ---

def admin_command(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    update.message.reply_text("–ê–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=get_admin_menu())

def moder_command(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if (user_id not in MODERATOR_IDS) and (user_id not in ADMIN_IDS):
        update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    update.message.reply_text("–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä-–º–µ–Ω—é:", reply_markup=get_moderator_menu())

def admin_block(update: Update, context: CallbackContext):
    if update.effective_user.id not in ADMIN_IDS:
        update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    try:
        user_id = int(context.args[0])
    except (IndexError, ValueError):
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /block <user_id>")
        return
    conn = get_connection()
    cur = conn.cursor()
    cur.execute("UPDATE users SET blocked = TRUE WHERE telegram_id = %s", (user_id,))
    conn.commit()
    cur.close()
    conn.close()
    update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

def admin_unblock(update: Update, context: CallbackContext):
    if update.effective_user.id not in ADMIN_IDS:
        update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    try:
        user_id = int(context.args[0])
    except (IndexError, ValueError):
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unblock <user_id>")
        return
    conn = get_connection()
    cur = conn.cursor()
    cur.execute("UPDATE users SET blocked = FALSE WHERE telegram_id = %s", (user_id,))
    conn.commit()
    cur.close()
    conn.close()
    update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

def admin_send(update: Update, context: CallbackContext):
    if update.effective_user.id not in ADMIN_IDS:
        update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    try:
        user_id = int(context.args[0])
        message = " ".join(context.args[1:])
    except (IndexError, ValueError):
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /send <user_id> <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
        return
    context.bot.send_message(chat_id=user_id, text=message)
    update.message.reply_text(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")

def admin_broadcast(update: Update, context: CallbackContext):
    if update.effective_user.id not in ADMIN_IDS:
        update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    message = " ".join(context.args)
    users = list_active_user_ids()
    count = 0
    for uid in users:
        try:
            context.bot.send_message(chat_id=uid, text=message)
            count += 1
        except:
            pass
    update.message.reply_text(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

def admin_add_moder(update: Update, context: CallbackContext):
    if update.effective_user.id not in ADMIN_IDS:
        update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    try:
        uid = int(context.args[0])
    except (IndexError, ValueError):
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addmoder <user_id>")
        return
    MODERATOR_IDS.add(uid)
    update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã.")

def admin_del_moder(update: Update, context: CallbackContext):
    if update.effective_user.id not in ADMIN_IDS:
        update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    try:
        uid = int(context.args[0])
    except (IndexError, ValueError):
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delmoder <user_id>")
        return
    if uid in MODERATOR_IDS:
        MODERATOR_IDS.remove(uid)
        update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} —É–¥–∞–ª—ë–Ω –∏–∑ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤.")
    else:
        update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")

def complaints_list(update: Update, context: CallbackContext):
    if (update.effective_user.id not in ADMIN_IDS) and (update.effective_user.id not in MODERATOR_IDS):
        update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    rows = list_complaints()
    if not rows:
        update.message.reply_text("–ñ–∞–ª–æ–± –Ω–µ—Ç.")
        return
    # –ù–∞ –∫–∞–∂–¥—É—é –∂–∞–ª–æ–±—É –æ—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∫–µ—Ç—ã
    for r in rows:
        rid = r["id"] if isinstance(r, dict) else r[0]
        reporter_id = r["reporter_id"] if isinstance(r, dict) else r[1]
        reported_id = r["reported_id"] if isinstance(r, dict) else r[2]
        reason = r["reason"] if isinstance(r, dict) else r[3]
        created_at = r["created_at"] if isinstance(r, dict) else r[4]
        text = f"–ñ–∞–ª–æ–±–∞ ID:{rid}\n–ù–∞: {reported_id}\n–û—Ç: {reporter_id}\n–ü—Ä–∏—á–∏–Ω–∞: {reason}\n–ö–æ–≥–¥–∞: {created_at}"
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data=f"compview:{reported_id}")]])
        update.message.reply_text(text, reply_markup=kb)

def users_csv(update: Update, context: CallbackContext):
    if update.effective_user.id not in ADMIN_IDS:
        update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    import csv
    from io import StringIO, BytesIO
    rows = list_users_for_csv()
    text_buf = StringIO()
    writer = csv.writer(text_buf)
    writer.writerow([
        'telegram_id','name','age','city','gender_interest','interests','smoking','drinking','relationship',
        'vip','blocked','last_view','daily_views','photos_count','videos_count'
    ])
    for r in rows:
        if isinstance(r, dict):
            writer.writerow([
                r.get('telegram_id'), r.get('name'), r.get('age'), r.get('city'), r.get('gender_interest'),
                ", ".join(r.get('interests') or []), r.get('smoking'), r.get('drinking'), r.get('relationship'),
                1 if r.get('vip') else 0, 1 if r.get('blocked') else 0, r.get('last_view'), r.get('daily_views'),
                r.get('photos_count'), r.get('videos_count')
            ])
        else:
            # r is a tuple in column order from list_users_for_csv
            telegram_id, name, age, city, gi, interests, smoking, drinking, relationship, vip, blocked, last_view, daily_views, photos_count, videos_count = r
            interests_s = ", ".join(interests) if isinstance(interests, list) else str(interests)
            writer.writerow([
                telegram_id, name, age, city, gi, interests_s, smoking, drinking, relationship,
                1 if vip else 0, 1 if blocked else 0, last_view, daily_views, photos_count, videos_count
            ])
    data = text_buf.getvalue().encode('utf-8')
    bin_buf = BytesIO(data)
    bin_buf.name = 'users.csv'
    update.message.reply_document(document=bin_buf)


def admin_stats(update: Update, context: CallbackContext):
    if update.effective_user.id not in ADMIN_IDS:
        update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    conn = get_connection()
    cur = conn.cursor()
    cur.execute("SELECT COUNT(*) AS c FROM users")
    total = cur.fetchone()["c"]
    cur.execute("SELECT COUNT(*) AS c FROM users WHERE vip=TRUE")
    vip = cur.fetchone()["c"]
    cur.execute("SELECT COUNT(*) AS c FROM users WHERE blocked=TRUE")
    blocked = cur.fetchone()["c"]
    cur.execute("SELECT COUNT(*) AS c FROM complaints")
    comp = cur.fetchone()["c"]
    cur.close()
    conn.close()
    update.message.reply_text(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {total}\nVIP: {vip}\n–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {blocked}\n–ñ–∞–ª–æ–±—ã: {comp}",
        reply_markup=get_main_menu(True),
    )


def _payment_provider_token() -> str:
    # –ü—Ä–æ–≤–∞–π–¥–µ—Ä Telegram Payments (YooKassa —á–µ—Ä–µ–∑ BotFather)
    # –í –±–æ—é –ª—É—á—à–µ —Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º live-—Ç–æ–∫–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
    return os.getenv("PAYMENT_PROVIDER_TOKEN", "390540012:LIVE:76203")

VIP_PRICE_AMOUNT = 30000  # 300 RUB –≤ –∫–æ–ø–µ–π–∫–∞—Ö

def _send_vip_invoice(context: CallbackContext, user_id: int):
    prices = [LabeledPrice(label="VIP 30 –¥–Ω–µ–π", amount=VIP_PRICE_AMOUNT)]
    try:
        provider_data = {
            # –ß–µ–∫ –¥–ª—è –ÆKassa (54‚Äë–§–ó). –£—Å–∫–æ—Ä—è–µ—Ç –ø—Ä–æ—Ö–æ–¥ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ –∫–∞—Ä—Ç–µ.
            "receipt": {
                "items": [
                    {
                        "description": "VIP 30 –¥–Ω–µ–π",
                        "quantity": "1.0",
                        "amount": {"value": "300.00", "currency": "RUB"},
                        # –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ù–î–° –≤–∞—à–µ–≥–æ –ò–ü/–û–û–û (1..6). 1 ‚Äî –±–µ–∑ –ù–î–°.
                        "vat_code": 1
                    }
                ]
            },
            # –ó–∞—Ö–≤–∞—Ç –ø–ª–∞—Ç–µ–∂–∞ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            "capture": True,
        }
        context.bot.send_invoice(
            chat_id=user_id,
            title="VIP –ø–æ–¥–ø–∏—Å–∫–∞",
            description=(
                "VIP —Å–Ω–∏–º–∞–µ—Ç –≤—Å–µ –ª–∏–º–∏—Ç—ã –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –∏ –ª–∞–π–∫–∏ –Ω–∞ 30 –¥–Ω–µ–π.\n"
                "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞: –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –∏ –ª–∞–π–∫–∏, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –ø–æ–∫–∞–∑–∞—Ö, \n"
                "–≤–∏–¥–∏–º–æ—Å—Ç—å @username –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)."
            ),
            payload="vip_month_300",
            provider_token=_payment_provider_token(),
            start_parameter="vip-sub",
            currency="RUB",
            prices=prices,
            provider_data=json.dumps(provider_data),
            need_name=False,
            need_phone_number=False,
            need_email=False,
            need_shipping_address=False,
            is_flexible=False,
        )
    except Exception as e:
        try:
            context.bot.send_message(chat_id=user_id, text="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        except Exception:
            pass
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ä—Ç –ø–ª–∞—Ç–µ–∂–∞
        try:
            from db import create_payment_record
            pid = f"invoice_fail:{user_id}:{int(datetime.utcnow().timestamp())}"
            create_payment_record(pid, user_id, VIP_PRICE_AMOUNT, "RUB", status="failed")
        except Exception:
            pass

def precheckout_callback(update: Update, context: CallbackContext):
    query = update.pre_checkout_query
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è payload/currency/amount
        if query.invoice_payload != "vip_month_300":
            query.answer(ok=False, error_message="–ù–µ–≤–µ—Ä–Ω—ã–π –ø–ª–∞—Ç—ë–∂. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            try:
                from db import create_payment_record
                pid = f"pre_fail:{query.from_user.id}:{int(datetime.utcnow().timestamp())}"
                create_payment_record(pid, query.from_user.id, query.total_amount or VIP_PRICE_AMOUNT, query.currency or "RUB", status="failed")
            except Exception:
                pass
            return
        if query.currency != "RUB":
            query.answer(ok=False, error_message="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–∞–ª—é—Ç–∞ RUB.")
            try:
                from db import create_payment_record
                pid = f"pre_fail:{query.from_user.id}:{int(datetime.utcnow().timestamp())}"
                create_payment_record(pid, query.from_user.id, query.total_amount or VIP_PRICE_AMOUNT, query.currency or "RUB", status="failed")
            except Exception:
                pass
            return
        if query.total_amount != VIP_PRICE_AMOUNT:
            query.answer(ok=False, error_message="–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç.")
            try:
                from db import create_payment_record
                pid = f"pre_fail:{query.from_user.id}:{int(datetime.utcnow().timestamp())}"
                create_payment_record(pid, query.from_user.id, query.total_amount or VIP_PRICE_AMOUNT, query.currency or "RUB", status="failed")
            except Exception:
                pass
            return
        query.answer(ok=True)
    except Exception:
        try:
            query.answer(ok=False, error_message="–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception:
            pass
        try:
            from db import create_payment_record
            pid = f"pre_fail:{query.from_user.id}:{int(datetime.utcnow().timestamp())}"
            create_payment_record(pid, query.from_user.id, getattr(query, 'total_amount', None) or VIP_PRICE_AMOUNT, getattr(query, 'currency', None) or "RUB", status="failed")
        except Exception:
            pass

def successful_payment_callback(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    sp = update.message.successful_payment
    # –ó–∞—â–∏—Ç–∏–º—Å—è –æ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –æ–±—ä–µ–∫—Ç–∞
    if not sp:
        update.message.reply_text("–ü–ª–∞—Ç—ë–∂ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ï—Å–ª–∏ –¥–µ–Ω—å–≥–∏ —Å–ø–∏—Å–∞–ª–∏—Å—å ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        return
    # –§–∏–∫—Å–∏—Ä—É–µ–º –æ–ø–ª–∞—Ç—É –≤ –ë–î –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º VIP
    try:
        from db import create_payment_record, update_payment_status
        payment_id = sp.provider_payment_charge_id or f"tg:{user_id}:{int(datetime.utcnow().timestamp())}"
        amount = sp.total_amount
        currency = sp.currency
        try:
            create_payment_record(payment_id, user_id, amount, currency, status="paid")
        except Exception:
            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ —Å–æ–∑–¥–∞–≤–∞–ª–∞—Å—å ‚Äî –æ–±–Ω–æ–≤–∏–º —Å—Ç–∞—Ç—É—Å
            try:
                update_payment_status(payment_id, "paid")
            except Exception:
                pass
        until = datetime.utcnow() + timedelta(days=30)
        set_vip_until(user_id, until)
        update.message.reply_text(
            "–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞! VIP –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 30 –¥–Ω–µ–π ‚úÖ\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É! –ü—Ä–∏—è—Ç–Ω—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤."
        )
    except Exception:
        # –°–æ–æ–±—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –Ω–µ —É–ø–∞–¥—ë–º
        update.message.reply_text(
            "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ VIP. –ú—ã —Ä–∞–∑–±–µ—Ä—ë–º—Å—è, VIP –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω."
        )
    # –£–≤–µ–¥–æ–º–∏–º –∞–¥–º–∏–Ω–æ–≤ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
    try:
        for aid in ADMIN_IDS:
            try:
                context.bot.send_message(chat_id=aid, text=f"–û–ø–ª–∞—Ç–∞ VIP: user {user_id}, —Å—É–º–º–∞ {sp.total_amount/100:.2f} {sp.currency}")
            except Exception:
                pass
    except Exception:
        pass


def admin_views_history(update: Update, context: CallbackContext):
    if update.effective_user.id not in ADMIN_IDS:
        update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    conn = get_connection()
    cur = conn.cursor()
    cur.execute("SELECT viewer_id, viewed_id, created_at FROM views ORDER BY created_at DESC LIMIT 20")
    rows = cur.fetchall()
    cur.close()
    conn.close()
    if not rows:
        update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø—É—Å—Ç–∞.")
        return
    lines = ["–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã:"]
    for r in rows:
        viewer = r["viewer_id"] if isinstance(r, dict) else r[0]
        viewed = r["viewed_id"] if isinstance(r, dict) else r[1]
        ts = r["created_at"] if isinstance(r, dict) else r[2]
        lines.append(f"{viewer} -> {viewed} ({ts})")
    update.message.reply_text("\n".join(lines), reply_markup=get_main_menu(True))


def admin_view_reports(update: Update, context: CallbackContext):
    if update.effective_user.id not in ADMIN_IDS:
        update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    try:
        target_id = int(context.args[0])
    except (IndexError, ValueError):
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /view_reports <user_id>")
        return
    # —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ reported_id
    rows = [r for r in list_complaints() if (r.get('reported_id') if isinstance(r, dict) else r[2]) == target_id]
    if not rows:
        update.message.reply_text("–ñ–∞–ª–æ–± –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç")
        return
    text = f"–ñ–∞–ª–æ–±—ã –Ω–∞ {target_id}:\n"
    for r in rows:
        reporter_id = r.get('reporter_id') if isinstance(r, dict) else r[1]
        reason = r.get('reason') if isinstance(r, dict) else r[3]
        created_at = r.get('created_at') if isinstance(r, dict) else r[4]
        text += f"–û—Ç {reporter_id} ‚Äî {reason} ({created_at})\n"
    update.message.reply_text(text)
